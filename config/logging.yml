# Copied from https://medium.com/bcggamma/data-science-python-best-practices-fdb16fdedf82

version: 1
# Set to False to get log messages from external packages you're using
disable_existing_loggers: False

# Formatters that are assigned to outputs ("handlers") below
formatters:
  simple:
    format: "[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s] - %(message)s"

# Outputs, one or more of which can be assigned to loggers
handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: simple
    stream: ext://sys.stdout

  debug_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: simple
    filename: logs/debug.log
    maxBytes: 20485760 # 20MB
    backupCount: 10
    encoding: utf8

  info_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: simple
    filename: logs/info.log
    maxBytes: 10485760 # 10MB
    backupCount: 10
    encoding: utf8

# How is each logger handled? In particular, set external packages you're
# using which spam the DEBUG, to log INFO and above (below, this is done 
# for the urllib3 and s3transfer loggers)
loggers:
  urllib3:
    level: INFO
    handlers: [info_file_handler]

  s3transfer:
    level: INFO
    handlers: [info_file_handler]
  
  numexpr:
    level: INFO
    handlers: [info_file_handler]
  
  matplotlib:
    level: INFO
    handlers: [info_file_handler]
  
  fiona:
    level: INFO
    handlers: [info_file_handler]
  
  h5py:
    level: INFO
    handlers: [info_file_handler]

  ezdxf:
    level: INFO
    handlers: [info_file_handler]

  numba:
    level: INFO
    handlers: [info_file_handler]

  luigi:
    level: DEBUG
    handlers: [debug_file_handler]

# The root logger
root:
  level: DEBUG
  handlers: [console, debug_file_handler, info_file_handler]